services:
  grafana:
    depends_on:
      cert_setup:
        condition: service_completed_successfully
      prometheus:
        condition: service_healthy
    image: grafana/grafana:11.0.0
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_PATHS_PROVISIONING: /usr/share/grafana/conf/provisioning/
    ports:
      - 3000:3000
    volumes:
      - certs_volume:/certs:ro
      - grafana_volume:/var/lib/grafana
      - ${PROJECT_DIR}/requirements/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ${PROJECT_DIR}/requirements/grafana/dashboard.yaml:/usr/share/grafana/conf/provisioning/dashboards/dashboards.yaml:ro
      - ${PROJECT_DIR}/requirements/grafana/datasource.yaml:/usr/share/grafana/conf/provisioning/datasources/datasource.yaml:ro
      - ${PROJECT_DIR}/requirements/grafana/dashboards/:/var/lib/grafana/dashboards:ro
    networks:
      - my_net
    healthcheck:
      test: ["CMD-SHELL", "curl -k https://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  prometheus:
    depends_on:
      vault_init:
        condition: service_completed_successfully
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    volumes:
      - ${PROJECT_DIR}/requirements/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ${PROJECT_DIR}/requirements/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_volume:/prometheus
      - certs_volume:/certs
    # ports:
    #   - 9090:9090
    networks:
      - my_net
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:9090/-/healthy | grep -q 'Prometheus Server is Healthy.'"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  node_exporter:
    image: prom/node-exporter:v1.8.0
    container_name: node_exporter
    networks:
      - my_net
    command:
      - --path.rootfs=/host
    pid: host
    # volumes:
    #   - /:/host:ro,rslave

  postgres_exporter:
    depends_on:
      userdb:
        condition: service_healthy
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: postgres_exporter
    networks:
      - my_net
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:${POSTGRES_PASSWORD}@userdb:5432/postgres?sslmode=disable"

  alertmanager:
    image: alertmanager:transcendence
    build: 
      context: ${PROJECT_DIR}/requirements/alertmanager
      dockerfile: dockerfile
    container_name: alertmanager
    volumes:
      - ${PROJECT_DIR}/requirements/alertmanager/alertmanager.yml:/etc/alertmanager/input.yml:ro
      - ${PROJECT_DIR}/requirements/alertmanager/setup.sh:/etc/alertmanager/setup.sh:ro
    environment:
      ALERTMANAGER_EMAIL_TO: ${ALERTMANAGER_EMAIL_TO}
      ALERTMANAGER_EMAIL_FROM: ${ALERTMANAGER_EMAIL_FROM}
      ALERTMANAGER_AUTH_USERNAME: ${ALERTMANAGER_AUTH_USERNAME}
      ALERTMANAGER_AUTH_PASSWORD: ${ALERTMANAGER_AUTH_PASSWORD}
    ports:
      - 9093:9093
    networks:
      - my_net
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:9093/-/healthy | grep -q 'OK'"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
  nginx_exporter:
    depends_on:
      nginx:
        condition: service_healthy
    image: nginx/nginx-prometheus-exporter:1.1
    container_name: nginx_exporter
    command: --nginx.scrape-uri=http://nginx:8484/metrics
    # ports:
    #   - 9113:9113
    networks:
      - my_net

volumes:
  grafana_volume:
    name: grafana_volume
    driver: local
  prometheus_volume:
    name: prometheus_volume
    driver: local
